# =========================
# Agent B (HEVA) – Environment Template
# Copy this file to `.env` and fill in values as needed.
# Never commit your real `.env`.
# =========================

# ---- Qdrant (vector DB) ----
# If running via docker-compose with a `qdrant` service, keep host as the service name.
QDRANT_SCHEME=http
QDRANT_HOST=qdrant
QDRANT_PORT=6333
QDRANT_URL=${QDRANT_SCHEME}://${QDRANT_HOST}:${QDRANT_PORT}
QDRANT_COLLECTION=cybersage_heva

# ---- API (FastAPI / Uvicorn) ----
API_HOST=0.0.0.0
API_PORT=8000
LOG_LEVEL=info
UVICORN_WORKERS=1
UVICORN_RELOAD=false

# ---- Embeddings ----
# Default MiniLM dims=384. Change model if you change dims.
EMBEDDING_MODEL_NAME=all-MiniLM-L6-v2
VECTOR_DIMS=384

# ---- Ingestion ----
# Initial dataset paths; override per environment if needed
INGEST_INPUT_JSON=Raw_Crawled_Fixed.json
INGEST_BATCH_SIZE=256
INGEST_UPSERT=true

# ---- Timeouts / Retries ----
HTTP_TIMEOUT_SECS=30
RETRY_ATTEMPTS=3
RETRY_BACKOFF_SECS=2

# ---- Security (leave blank; set locally only) ----
# API_KEY=
# QDRANT_API_KEY=
EOF
Optionally, create your local .env from it (not committed):

bash
Copy code
cp -n .env.example .env
# then edit .env as needed
2) Ensure scripts/fetch_artifacts.sh exists (you already made it)
If you need to regenerate a clean version:

bash
Copy code
mkdir -p scripts
cat > scripts/fetch_artifacts.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

# Replace these with real links (GitHub Releases, S3, GDrive)
: "${DATASET_URL:=https://example.com/cybersage/dataset-v1.zip}"
: "${MODELS_URL:=https://example.com/cybersage/models-v1.zip}"

# Optional SHA256 lines exactly as in `sha256sum` output:
: "${DATASET_SHA256:=}"
: "${MODELS_SHA256:=}"

ART_DIR="artifacts"
mkdir -p "${ART_DIR}"

fetch() {
  local url="$1"; local out="$2"
  echo "[+] Downloading: $url -> $out"
  curl -L --fail --retry 3 --retry-delay 2 "$url" -o "$out"
}

verify_sha256() {
  local expected="$1"; local file="$2"
  [ -z "$expected" ] && return 0
  echo "$expected" | sha256sum --check --status --strict - || {
    echo "[-] SHA256 mismatch for $file"; exit 1;
  }
  echo "[+] SHA256 OK for $file"
}

unpack() {
  local file="$1"
  case "$file" in
    *.zip)         echo "[+] Unzipping $file"; unzip -o "$file" -d "$ART_DIR" >/dev/null ;;
    *.tar.gz|*.tgz)echo "[+] Extracting $file"; tar -xzf "$file" -C "$ART_DIR" ;;
    *)             echo "[i] Skipping unpack for $file";;
  esac
}

DATASET_FILE="${ART_DIR}/$(basename "$DATASET_URL")"
fetch "$DATASET_URL" "$DATASET_FILE"
[ -n "$DATASET_SHA256" ] && verify_sha256 "$DATASET_SHA256" "$DATASET_FILE"
unpack "$DATASET_FILE"

if [ -n "${MODELS_URL}" ]; then
  MODELS_FILE="${ART_DIR}/$(basename "$MODELS_URL")"
  fetch "$MODELS_URL" "$MODELS_FILE"
  [ -n "$MODELS_SHA256" ] && verify_sha256 "$MODELS_SHA256" "$MODELS_FILE"
  unpack "$MODELS_FILE"
fi

echo "[✓] Artifacts ready in ${ART_DIR}/"