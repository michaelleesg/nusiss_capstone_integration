{
  "active_exploitation": false,
  "active_exploitation_mentioned": true,
  "affected_products": [],
  "affects_asean": false,
  "affects_singapore": false,
  "cve": {
    "active_exploitation": false,
    "enriched_count": 0,
    "highest_cvss": 0.0,
    "highest_severity": "UNKNOWN",
    "not_enriched_count": 1,
    "patch_availability": false,
    "total_count": 1,
    "vulnerabilities": [
      {
        "active_exploitation": false,
        "affected_versions": [],
        "cpe_strings": [],
        "cvss_score": 0.0,
        "id": "CVE-2003-2025",
        "patch_available": false,
        "products": [],
        "relevance_category": "reference",
        "relevance_reasoning": "Mentioned as a historical reference without tactical relevance to the current threat discussed.",
        "relevance_score": 0.1,
        "severity": "NOT_ENRICHED"
      }
    ]
  },
  "cve_extraction_attempted": true,
  "cve_severity": [],
  "cve_vulns": [
    "CVE-2003-2025"
  ],
  "entities_extraction_attempted": true,
  "escalation_potential": "The potential for escalation exists if these cyber operations are perceived as state-sponsored, leading to retaliatory measures from affected nations.",
  "geographic_analysis_attempted": true,
  "geopolitical_analysis": {
    "analysis_metadata": {
      "confidence": "high",
      "method": "llm_enhanced",
      "reasoning": "The analysis is based on the detailed examination of the malware's capabilities, the threat actor's known behaviors, and the geopolitical context of cyber operations in Southeast Asia. The evidence supports a clear understanding of the motivations and implications of the threat landscape."
    },
    "escalation_potential": "The potential for escalation exists if these cyber operations are perceived as state-sponsored, leading to retaliatory measures from affected nations.",
    "escalation_risk": "medium",
    "historical_precedents": "Similar incidents have occurred in the region, where cyber operations have been linked to state actors, leading to diplomatic tensions and retaliatory cyber strikes.",
    "regional_context": "Southeast Asia is experiencing increasing cyber threats, with nations like Vietnam enhancing their cyber capabilities, which may lead to a regional arms race in cyber warfare.",
    "stakeholder_interests": "Various state and non-state actors have vested interests in the outcomes of these cyber operations, including national security agencies, private sector companies, and international organizations focused on cybersecurity.",
    "strategic_implications": [
      "The use of sophisticated malware like PureRAT indicates a growing capability among non-state actors in the region, which could destabilize existing security frameworks and challenge state sovereignty."
    ],
    "underlying_causes": [
      "The rise of cyber capabilities in Southeast Asia, particularly in Vietnam, where the threat actor PXA is believed to operate. This reflects broader regional trends in cyber warfare and state-sponsored espionage."
    ]
  },
  "global_implications": true,
  "high_tension_event": true,
  "iocs": {
    "commands": [
      "cmd /c cd _ && start Document.pdf && certutil -decode"
    ],
    "domains": [
      "paste.rs",
      "0x0.st",
      "is.gd",
      "toksearches.xyz"
    ],
    "email_addresses": [],
    "excluded": {
      "commands": [],
      "domains": [
        {
          "ioc": "smartwebfinder.com",
          "reason": "source/reporting organization domain"
        },
        {
          "ioc": "theonlinesearch.com",
          "reason": "source/reporting organization domain"
        }
      ],
      "email_addresses": [],
      "file_paths": [],
      "hashes": [],
      "ips": [],
      "processes": [
        {
          "ioc": "svchost.exe",
          "reason": "legitimate system process"
        },
        {
          "ioc": "cmd.exe",
          "reason": "legitimate system process"
        },
        {
          "ioc": "RegAsm.exe",
          "reason": "legitimate system process"
        },
        {
          "ioc": "certutil.exe",
          "reason": "legitimate system process"
        }
      ],
      "registry_keys": [],
      "urls": []
    },
    "file_paths": [
      "C:\\Users\\public",
      "C:\\Windows\\SysWOW64",
      "C:\\Users\\Public && start C",
      "C:\\Users\\Public",
      "C:\\Users\\Malware"
    ],
    "hashes": [
      "06fc70aa08756a752546198ceb9770068a2776c5b898e5ff24af9ed4a823fd9d",
      "f6ed084aaa8ecf1b1e20dfa859e8f34c4c18b7ad7ac14dc189bc1fc4be1bd709",
      "f5e9e24886ec4c60f45690a0e34bae71d8a38d1c35eb04d02148cdb650dd2601"
    ],
    "ips": [],
    "processes": [
      "wwctn_crypted.exe",
      "maegkffm.exe",
      "volving_copyrighted_material.exe"
    ],
    "registry_keys": [],
    "urls": [
      "https://0x0.st/8WBr.py",
      "https://is.gd/s5xknuj2",
      "https://paste.rs/fVmzS"
    ]
  },
  "iocs_extraction_attempted": true,
  "malware": [
    "PureRAT",
    "PXA Stealer",
    "PureHVNC",
    "PureCrypter",
    "BlueLoader",
    "PureMiner",
    "PureLogs Stealer",
    "PureClipper"
  ],
  "markdown": "News\nFeatured\nLatest\nClop exploited Oracle zero-day for data theft since early August\nMicrosoft kills more Microsoft Account bypasses in Windows 11\nGoogle's new AI bug bounty program pays up to $30,000 for flaws\nMicrosoft: Critical GoAnywhere bug exploited in ransomware attacks\nMicrosoft: Windows Backup now available for enterprise users\nSonicWall: Firewall configs stolen for all cloud backup customers\nFrom infostealer to full RAT: dissecting the PureRAT attack chain\nAzure outage blocks access to Microsoft 365 services, admin portals\nTutorials\nLatest\nPopular\nHow to access the Dark Web using the Tor Browser\nHow to enable Kernel-mode Hardware-enforced Stack Protection in Windows 11\nHow to use the Windows Registry Editor\nHow to backup and restore the Windows Registry\nHow to start Windows in Safe Mode\nHow to remove a Trojan, Virus, Worm, or other Malware\nHow to show hidden files in Windows 7\nHow to see hidden files in Windows\nVirus Removal Guides\nLatest\nMost Viewed\nRansomware\nRemove the Theonlinesearch.com Search Redirect\nRemove the Smartwebfinder.com Search Redirect\nHow to remove the PBlock+ adware browser extension\nRemove the Toksearches.xyz Search Redirect\nRemove Security Tool and SecurityTool (Uninstall Guide)\nHow to Remove WinFixer / Virtumonde / Msevents / Trojan.vundo\nHow to remove Antivirus 2009 (Uninstall Instructions)\nHow to remove Google Redirects or the TDSS, TDL3, or Alureon rootkit using TDSSKiller\nLocky Ransomware Information, Help Guide, and FAQ\nCryptoLocker Ransomware Information Guide and FAQ\nCryptorBit and HowDecrypt Information Guide and FAQ\nCryptoDefense and How_Decrypt Ransomware Information Guide and FAQ\nDownloads\nLatest\nMost Downloaded\nQualys BrowserCheck\nSTOPDecrypter\nAuroraDecrypter\nFilesLockerDecrypter\nAdwCleaner\nComboFix\nRKill\nJunkware Removal Tool\nDeals\nCategories\neLearning\nIT Certification Courses\nGear + Gadgets\nSecurity\nVPNs\nPopular\nBest VPNs\nHow to change IP address\nAccess the dark web safely\nBest VPN for YouTube\nForums\nMore\nStartup Database\nUninstall Database\nGlossary\nChat on Discord\nSend us a Tip!\nWelcome Guide\nHome\nNews\nSecurity\nFrom infostealer to full RAT: dissecting the PureRAT attack chain\nFrom infostealer to full RAT: dissecting the PureRAT attack chain\nSponsored by\nHuntress Labs\nOctober 9, 2025\n10:01 AM\n0\nBy James Northey and Anna Pham (Contributor) of Huntress Labs\nAn investigation into what appeared at first glance to be a “standard” Python-based infostealer campaign took an interesting turn when it was discovered to culminate in the deployment of a full-featured, commercially available remote access trojan (RAT) known as PureRAT. This article analyses the threat actor’s combination of bespoke self-developed tooling with off-the-shelf malware.\nThis campaign demonstrates a clear and deliberate progression, starting with a simple phishing lure and escalating through layers of in-memory loaders, defense evasion, and credential theft. The final payload, PureRAT, represents the culmination of this effort: a modular, professionally developed backdoor that gives the attacker complete control over a compromised host.\nWe’ll dissect the entire attack chain, from the initial sideloaded DLL to the final encrypted command-and-control (C2) channel, providing the context and indicators you need to defend your networks.\nNote: Since beginning this analysis, SentinelLABS and Beazley Security have published an excellent\nreport\ncovering Stage 1 and 2. It’s well worth a read for additional context, though the material from Stage 3 (PureRAT) remains unique to this write-up, so stick around for that.\nIn-depth threat analysis\nFigure 1: Overview of the Attack Chain\nThis intrusion is a great example of layered obfuscation and tactical evolution. The threat actor chained together ten distinct payloads/stages, progressively increasing in complexity to hide their ultimate objective.\nStage 1: The initial lure and Python Loaders.\nThe attack begins with a conventional phishing email containing a ZIP archive disguised as a copyright infringement notice. The archive contains a legitimate, signed PDF reader executable and a malicious\nversion.dll\n.\nThis is a classic\nDLL sideloading\ntechnique, forcing a trusted executable to inadvertently load the malicious DLL from the same directory.\nFigure 2: Malicious archive sent in phishing email\nThe malicious DLL uses a series of Windows binaries and files within the hidden folder “_” to execute the next payload. It uses\ncertutil.exe\nto decode a Base64-encoded blob hidden inside a file named\nDocument.pdf\n, which results in a ZIP archive. It then uses a bundled, renamed copy of WinRAR (\nimages.png\n) to extract the contents.\nFrom this secondary archive, the files are extracted to\nC:\\Users\\public\\windows\\\nand include a renamed Python interpreter (\nsvchost.exe\n) and an obfuscated Python script (\nimages.png\n), which are then executed.\nThis phase of the attack, as described above, is captured by Sysmon event:\nType: Process Create\r\nImage: C:\\Windows\\SysWOW64\\cmd.exe\r\nParentImage: C:\\Users\\Malware\\Desktop\\sample\\Detailed_report_document_on_actions_in\r\nvolving_copyrighted_material.exe\r\nCommandLine: cmd /c cd _ && start Document.pdf && certutil -decode\r\nDocument.pdf Invoice.pdf && images.png x -ibck -y Invoice.pdf\r\nC:\\Users\\Public && start C:\\Users\\Public\\Windows\\svchost.exe\r\nC:\\Users\\Public\\Windows\\Lib\\images.png ADN_UZJomrp3vPMujoH4bot\nPayload 2\nThe Python script\nimages.png\n(not images.png, the WinRAR binary) is a loader that contains a large, Base85-encoded string. The payload is executed entirely in memory using\nexec()\nafter being decoded and decompressed, kicking off payload 3.\nFigure 3: Archives payload - a Python bytecode loader\nPayload 3\nRunning payload 3 through dis, a built-in module for turning bytecode to human-readable interpretation, reveals this to be another loader, this time a custom cryptographic one. It uses a hybrid encryption scheme involving RSA, AES, RC4, and XOR to decrypt the payload 4 payload.\nFigure 4: Summary of the output of python dis\nPayload 4\nRebuilding this functionality in our own Python script allows us to run this payload through\ndis\nagain.\nNote: From here on, I have converted the\ndis\noutput to source code to more easily explain the following sections.\nFor an in-memory attack like this, the threat actor must ensure their malware can survive a system reboot. The payload 4 script uses Python's built-in winreg library to modify the system registry keys, adding a run key designed to look like a legitimate Windows component:\nWindows Update Service\nFigure 5: Recreation of payload 4’s infection check and persistence creation\nThe data stored in this value is a command that re-executes the first stage of the malware, ensuring the entire infection chain is re-initiated every time the compromised user logs in.\ncmd /c start C:\\Users\\Public\\Windows\\svchost.exe C:\\Users\\Public\\Windows\\Lib\\images.png <sys.argv[1]>\nPayload 4 then continues the loader pattern, this time using Telegram bot descriptions and URL shorteners (\nis[.]gd\n) to dynamically fetch and execute the next payload, providing the threat actor with a flexible mechanism for updating their attack chain.\nFigure 6: Recreation of the loader for stage 2\nNote the use of\nsys.argv[1]\nhere; in our case, this is the argument\nADN_UZJomrp3vPMujoH4bot\nfrom when stage 1 extracted payload 2 and ran the first Python script.\nLearn to Wreck Hackers at Tradecraft Tuesday with Huntress\nHacker tradecraft’s evolving daily, so let’s break it down on Tradecraft Tuesday!\nJoin Huntress Labs monthly for an in-depth look at attacker tradecraft—no sales or product talk involved. Sign up for the series today or catch up on previous episodes. No tricks, just tradecraft.\nRegister for Tradecraft Tuesday\nStage 2: The first weaponized payload—A Python Info-Stealer\nPulling down the next stage from\nis[.]gd\n, we arrive at the first weaponized payload: a Python-based information stealer. Analysis of the decrypted bytecode reveals functionality for harvesting a wide range of sensitive data, including credentials, cookies, credit cards, and autofill data from Chrome and Firefox-based browsers.\nFigure 7: Recreation of new victim notification\nAll stolen data is archived into a ZIP file and exfiltrated via the Telegram Bot API. The ZIP file's metadata contains a clue to who might be behind this attack. A contact field pointing to the Telegram handle\n@LoneNone\n.\nThis handle has been publicly associated with the PXA Stealer malware family, giving us a strong attribution link.\nFigure 8: Recreation of the archive creation of collected information with a clue “@LoneNone”\nThe telegram API is then used to send the resulting zip and message (above) to various Telegram chats, depending on the following logic:\nTelegram Chat\nUsed for\nWhen Used\nData Sent\nCHAT_ID_NEW\n(-1002460490833)\nMain data\nIf Count == 1\nZip archive, message\nCHAT_ID_RESET\n(-1002469917533)\nFallback or reinfection?\nIf Count != 1\nZip archive, message\nCHAT_ID_NEW_NOTIFY\n(-4530785480)\nNotification channel\nIf Count == 1\nMessage-only notification\nTable 1: Telegram Message Logic\nStage 3: The Pivot to .NET\nJust when the campaign's objective seems clear, the threat actor pivots. Stage 3 marks a significant shift from interpreted Python scripts to compiled .NET executables.\nFigure 9: Recreation of the stage 3 loader\nThe new stage is retrieved from\n0x0[.]st\n, a ”No-bullshit file hosting and URL shortening service”, this stage is much larger than the previous Python script (40KB -> ~3 MB), as it contains two more embedded payloads.\nThe first binary is a .NET assembly that is decrypted using base64 and an RC4 hardcoded key. The threat actor then uses\nprocess hollowing\nby launching a legitimate .NET utility,\nRegAsm.exe\n, in a suspended state.\nIt unmaps the original executable code from the process's memory, allocates a new region of memory, and writes the malicious .NET payload into it (payload 7). The main thread's context is then updated to point to the new entry point, and the thread is resumed, executing the malicious code under the guise of a legitimate Microsoft binary.\nFigure 10: Recreation of the Python script used for process hollowing and loading an encrypted .NET assembly\nThe second is a shellcode loader, but I won’t be diving into this payload here, partly because this write-up is already dense enough, but mostly because I ran into issues trying to emulate it.\nPayload 7\nThis is our first PE payload, and it appears debugging strings were left by the author, which confirms that it performs two key defense evasion techniques:\nFigure 11: FLOSS output of the .NET assembly\nAMSI Patching:\nIt patches the\nAmsiScanBuffer\nfunction in\namsi.dll\nto prevent the Antimalware Scan Interface from inspecting dynamically loaded code.\nETW Unhooking:\nIt patches\nEtwEventWrite\nin\nntdll.dll\nto blind Event Tracing for Windows, a common source of telemetry for EDR products.\nThis assembly contains yet another embedded payload (payload 8), which it decodes using a simple Base64 and XOR combo.\nOnce the payload is decrypted, it’s passed to the built-in .NET method\nAssembly.Load\n, which loads the executable directly into memory, the flow continues through\ngetEntryPoint\n, which retrieves the entry point of the loaded assembly, and finally,\ninvokeCSharpMethod\nexecutes the method via reflection.\nFigure 12: dnSpy disassembly of the loader for the next payload\nExtracting this payload using CyberChef (Base64 → XOR with key),\nFigure 13: CyberChef recipe to extract the next payload\nPayload 8\nThis payload uses AES-256 and GZip decompression to unpack the ninth and final stage: a DLL named\nMhgljosy.dll\n. Instead of relying on traditional exports, the loader uses\n.NET reflection\n(\nAssembly.Load()\n,\nGetType()\n,\nGetMethod())\nto load the DLL entirely in memory and invoke a specific, obfuscated method to kick off its execution.\nFigure 14: The loader for payload 9, post-decryption\nWith a breakpoint on\nGetMethod()\nand a little bit of debugging, we find out this method is\nMhgljosy.Formatting.TransferableFormatter.SelectFormatter()\n.\nPayload 9: The Final Part—PureRAT\nAfter eight payloads/stages of loaders, stealers, and obfuscation, we finally arrive at the last payload,\nMhgljosy.dll\n. But the DLL is protected with\n.NET Reactor\n, a commercial obfuscator used to frustrate reverse engineering.\nFigure 15: DiE showing the assembly has been obfuscated by .NET Reactor\nStatic analysis is a dead end, so we turn to deobfuscation. Using an open-source tool called\nNETReactorSlayer\n(Thanks, Anna Pham, for the suggestion), we were able to strip away enough of the control flow redirection and string encryption to produce a more legible assembly.\nWith a cleaner binary, we can analyze the entry point identified in the previous payload:\nFollowing the deobfuscated control from, we first hit\nReceiveAttachedSubscriber\n. Just above this method, we see a Base64 blob.\nFigure 16: First method of interest in PureRAT\nThe decoding logic is:\nBase64 Decode:\nThe initial string is decoded.\nGZip Decompress:\nThe base64 decoded output reveals a GZip header.\nProtobuf Deserialize:\nThe decompressed data is deserialized using a Protocol Buffers (protobuf) schema.\nThis reveals the malware's configuration.\nFigure 17: Decoding PureRATs configuration\nThe final, deserialized config contains the C2 infrastructure: an IP address (\n157.66.26[.]209\n), a list of ports (\n56001, 56002, 56003\n), and another base64 blob that decodes to an X.509 certificate. The malware uses this certificate for TLS pinning, ensuring its C2 communications are encrypted and resilient to man-in-the-middle inspection.\nFigure 18: Socket setup with TLS Pinning\nOf note, this C2 server is located in Vietnam, which adds further evidence that this is PXA and the people behind it are likely Vietnamese.\nFigure 19: Validin page for the attackers' C2 server\nOnce connected to the C2, the RAT sends back to the operator in an initial \"hello\" packet. Made up from the following logic, which is hard to understand due to the obfuscation of the method names.\nFigure 20: Obfuscated system enumeration\nOnce manually deobfuscated, we find that this consists of an exhaustive fingerprinting of the host machine, collecting a wealth of information before sending it back to the C2 server.\nFigure 21: Deobfuscated system enumeration\nThe following are breakdowns of all the functions used in this fingerprinting routine:\nFigure 22: Antivirus Products: Queries WMI (root\\SecurityCenter) for the displayName of all installed antivirus products\nFigure 23: The PlaySubscriber() function used to create a unique host identifier\nUnique Host ID:\nAs seen in Figure 23, this is generated by  an MD5 hash based on the processor ID, disk drive serial number, physical memory serial number, and the user's domain name. This creates a stable, unique identifier for the victim machine.\nFigure 24: Webcam Presence: Queries WMI for PnP devices with the class Image or Camera\nFigure 25: User and Domain: Collects the current username and domain (username [DOMAIN])\nFigure 26: Privilege Level: Checks the current process's Windows Identity against built-in roles (Administrator, User, Guest, etc.) to determine its privilege level\nFigure 27: Operating System: Gathers the OS version and architecture (e.g., \"Windows 10 64Bit\")\nFigure 28: The RemoveSelector() function used to find and list any present cryptowallets\nCryptocurrency Wallets:\nThis one searches for dozens of browser-based and desktop cryptocurrency wallets by checking for Chrome extension IDs, file system paths (\n%APPDATA%\n), and registry keys.\nNote: this function does not collect any data, just returns a string of what is present on the system.\nFigure 29: System Idle Time: Uses the GetLastInputInfo API to determine how long the user has been idle, allowing the operator to operate when the user is away\nFigure 30: Implant Path: Reports its own file path on disk\nOnce the initial host fingerprinting is complete and the handshake with the C2 is established, the RAT transitions into its primary function: a persistent tasking loop designed to receive and execute commands.\nFigure 31: Task loop awaiting further payloads\nThe task loop is fairly straightforward once unpacked:\n(Red) Read the first 4 bytes to determine the payload length.\n(Blue) Read that many bytes into a buffer — this is the actual payload.\n(Green) Deserialize the buffer with the protobuf routine we saw earlier.\n(Green) Spawn a new thread and call\nDecideFlexibleController()\non the message to execute the task.\nThis architecture effectively turns this RAT into a dynamic loader. The implant lies dormant, waiting for the operator to push down modules on demand, dynamically extending its capabilities far beyond the initial reconnaissance. These plugins could add functionality for anything from microphone/webcam access to real-time keylogging and hidden desktop access.\nFortunately for the victim, the Huntress SOC was able to isolate and remediate the infected host before the threat actor could deploy any of these additional weaponized plugins, stopping the attack before it could achieve its final objectives. Unfortunately for us, that means we don’t have any further modules to investigate.\nOne final clue reveals Pure RAT\nThe .NET namespaces give us another clue with mentions of\nPureHVNC\n, strong evidence that this sample is tied to Pure Hidden VNC. A piece of commodity malware previously sold by someone going by the alias “\nPureCoder\n”\nFigure 32: PureHVNC modules in the assembly\nWhile\nPureHVNC\nis pretty much legacy at this point, many of its modules live on in PureCoder’s newer malware families, each designed to serve a specific purpose:\nPureCrypter\n– a crypter used to inject malware into legitimate processes, evade detection, and frustrate analysis with anti-VM and anti-debug checks.\nBlueLoader\n– a loader that deploys additional payloads on infected systems, giving attackers an easy way to stage and update malware campaigns.\nPureMiner\n– a silent cryptojacker that hijacks the victim’s CPU and GPU resources to mine cryptocurrency for the attacker without consent.\nPureLogs Stealer\n– an information stealer that exfiltrates browser data, saved credentials, and session tokens, often delivering them directly to the attacker’s Telegram.\nPureRAT\n– a modular backdoor that establishes an encrypted C2 channel, and allows operators to load additional modules\nPureClipper\n– monitors the system clipboard for cryptocurrency addresses and replaces them with attacker-controlled addresses during copy-paste operations, redirecting crypto transactions to steal funds.\nThis architecture and feature set we have observed here align perfectly with\nPureRAT\n, the developer openly advertised this tool as a custom-coded .NET remote “administration tool”, with a lightweight, TLS/SSL-encrypted client and multilingual GUI, offering extensive surveillance and control features such as hidden desktop access (HVNC/HRDP), webcam and microphone spying, real-time and offline keylogging, remote CMD, and application monitoring (e.g., browsers, Outlook, Telegram, Steam).\nIt includes management tools like file, process, registry, network, and startup managers, plus capabilities for DDoS attacks, reverse proxying, .NET code injection, streaming bot management, and execution of files in memory or disk. Though it notably \"excludes password/cookie recovery\" (Stealer Functionality) as that is sold separately.\nFigure 33: PureRAT C2 interface from PureCoder’s advertising\nConclusion\nThe recurring Telegram infrastructure, metadata linking to\n@LoneNone\n, and C2 servers traced to Vietnam strongly suggest this was carried out by the people behind PXA Stealer. Their progression from amateurish obfuscation of their Python payloads to abusing commodity malware like PureRAT shows not just persistence, but also hallmarks of a serious and maturing operator.\nThe threat actor demonstrated proficiency in multiple languages and techniques, from Python bytecode loaders and WMI enumeration to .NET process hollowing and reflective DLL loading.\nFrom a wider point of view, the pivot from a custom-coded stealer to a commercial RAT like PureRAT is significant. It lowers the barrier to entry for the attacker, giving them access to a stable, feature-rich, and “professionally” maintained toolkit without requiring extensive development effort.\nThe impact is a more resilient, modular, and dangerous threat capable of extensive data theft, surveillance, follow-on attacks, and long-term persistence.\nThis campaign underscores the importance of defense-in-depth. The initial access relied on user execution, the loaders exploited trusted and system binaries, and the final stage used defense evasion to remain hidden.\nNo single control could have stopped this entire chain. By understanding the full lifecycle of the attack and monitoring for the specific behaviors outlined here, from\ncertutil\nabuse to WMI queries and encrypted C2 traffic, organizations can build a more resilient security posture.\nMaintain Situational Awareness—Register for Tradecraft Tuesday\nTradecraft Tuesday provides cybersecurity professionals with an in-depth analysis of the latest threat actors, attack vectors, and mitigation strategies.\nEach weekly session features technical walkthroughs of recent incidents, comprehensive breakdowns of malware trends, and up-to-date indicators of compromise (IOCs).\nParticipants gain:\nDetailed briefings on emerging threat campaigns and ransomware variants\nEvidence-driven defense methodologies and remediation techniques\nDirect interaction with Huntress analysts for incident response insights\nAccess to actionable threat intelligence and detection guidance\nAdvance your defensive posture with real-time intelligence and technical education specifically designed for those responsible for safeguarding their organization’s environment.\nRegister for Tradecraft Tuesday →\nMITRE ATT&CK Mapping\nTactic\nTechnique\nTechnique Name\nDescription of Observed Behavior\nInitial Access\nT1566.001\nSpearphishing Attachment\nThe campaign begins with a phishing email containing a malicious ZIP archive.\nExecution\nT1204.002\nUser Execution: Malicious File\nThe user is tricked into executing an .exe file disguised as a document.\nExecution\nT1059.006\nPython\nStages 1 and 2 are executed via a renamed Python interpreter.\nPersistence\nT1547.001\nRegistry Run Keys / Startup Folder\npayload 4 establishes persistence by creating a \"Windows Update Service\" Run key.\nDefense Evasion\nT1574.001\nDLL Side-Loading\nA legitimate PDF reader executable is used to load a malicious version.dll.\nDefense Evasion\nT1027\nObfuscated Files or Information\nMultiple stages use Base85, Base64, RC4, AES, and XOR to hide payloads.\nDefense Evasion\nT1055.012\nProcess Hollowing\nThe payload 7 .NET loader is injected into a suspended RegAsm.exe process.\nDefense Evasion\nT1562.001\nImpair Defenses: Disable or Modify Tools\nThe payload 7 loader patches AMSI to bypass runtime scanning.\nDefense Evasion\nT1562.006\nImpair Defenses: Indicator Blocking\nThe payload 7 loader unhooks ETW to block EDR telemetry.\nDiscovery\nT1082\nSystem Information Discovery\nPureRAT fingerprints the OS version, architecture, and user privileges.\nDiscovery\nT1518.001\nSecurity Software Discovery\nThe malware uses WMI to enumerate installed antivirus products.\nCollection\nT1560.001\nArchive Collected Data: Archive via Utility\nStolen data is compressed into a ZIP archive before exfiltration.\nCommand and Control\nT1071.001\nWeb Protocols\nThe stage 2 stealer exfiltrates data via HTTP POST requests to the Telegram API.\nCommand and Control\nT1573.002\nEncrypted Channel: Asymmetric Cryptography\nPureRAT uses TLS with a pinned X.509 certificate for C2 communications.\nIndicators of Compromise\nDisk and Memory Artifacts\nValue\nDescription\nMhgljosy.dll\nSHA256: e0e724c40dd350c67f9840d29fdb54282f1b24471c5d6abb1dca3584d8bacaa\nPayload 9 (PureRAT)\nmaegkffm.exe\nSHA256: 06fc70aa08756a752546198ceb9770068a2776c5b898e5ff24af9ed4a823fd9d\nPayload 8 (PureRAT Loader)\nwwctn_crypted.exe\nSHA256: f5e9e24886ec4c60f45690a0e34bae71d8a38d1c35eb04d02148cdb650dd2601\nPayload 7 (NetLoader)\nFile Path: C:\\Users\\Public\\Windows\\svchost.exe\nRenamed Python interpreter used in early stages.\nFile Path: C:\\Users\\Public\\Windows\\Lib\\images.png\nSHA256: f6ed084aaa8ecf1b1e20dfa859e8f34c4c18b7ad7ac14dc189bc1fc4be1bd709\nObfuscated Python script (payload 2).\nRegistry Key: HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Windows Update Service\nPersistence registry key created in payload 4.\nNetwork/Infrastructure\nType\nValue\nDescription\nIP Address\n157.66.26[.]209\nPureRAT C2 Server\nPort\n56001\nPureRAT C2 Port (Default)\nPort\n56002\nPureRAT C2 Port\nPort\n56003\nPureRAT C2 Port\nURL\nhttps://0x0[.]st/8WBr.py\nStage 3 payload hosting URL.\nURL\nhttps://is[.]gd/s5xknuj2\nhttps://paste[.]rs/fVmzS\nStage 2 payload hosting URL.\nTelegram Handle\n@LoneNone\nthreat actor handle associated with stage 2 (PXA Stealer).\nAcknowledgments\nI would like to thank\nAnna Pham\nfor her help dumping and deobfuscating the final stage.\nSponsored and written by\nHuntress Labs\n.\nCybersecurity\nHuntress Labs\nInfostealer\nMalware\nPureRAT\nPXA Stealer\nPrevious Article\nNext Article\nComments have been disabled for this article.\nPopular Stories\nMicrosoft 365 outage blocks access to Teams, Exchange Online\nRed Hat data breach escalates as ShinyHunters joins extortion\nRedis warns of critical flaw impacting thousands of instances\nSponsor Posts\nPresenting AI to the Board? Get the Free Template.\nRedefine security validation with Picus' AI-driven Breach and Attack Simulation\nSee how Material secures Gmail & Drive with EDR-style detection and rapid response\nJoin Huntress to discuss all things tradecraft in a monthly meeting of the technical minds.\nThe role of Artificial Intelligence in today’s cybersecurity landscape\nFollow us:\nMain Sections\nNews\nVPN Buyer Guides\nSysAdmin Software Guides\nDownloads\nVirus Removal Guides\nTutorials\nStartup Database\nUninstall Database\nGlossary\nCommunity\nForums\nForum Rules\nChat\nUseful Resources\nWelcome Guide\nSitemap\nCompany\nAbout BleepingComputer\nContact Us\nSend us a Tip!\nAdvertising\nWrite for BleepingComputer\nSocial & Feeds\nChangelog\nTerms of Use\n-\nPrivacy Policy\n-\nEthics Statement\n-\nAffiliate Disclosure\nCopyright @ 2003 - 2025\nBleeping Computer\n®\nLLC\n- All Rights Reserved\nLogin\nUsername\nPassword\nRemember Me\nSign in anonymously\nSign in with Twitter\nNot a member yet?\nRegister Now\nReporter\nHelp us understand the problem. What is going on with this comment?\nSpam\nAbusive or Harmful\nInappropriate content\nStrong language\nOther\nRead our\nposting guidelinese\nto learn what content is prohibited.\nSubmitting...\nSUBMIT",
  "mitre_analysis": {
    "attack_pattern": "The attack pattern demonstrates a coherent sequence of techniques starting from initial access via phishing, followed by execution through DLL sideloading and in-memory execution, establishing persistence, evading defenses, collecting data, and finally communicating with command and control. Each technique is supported by strong behavioral evidence, indicating a well-structured attack chain.",
    "confidence": 10,
    "method": "enhanced_3step",
    "processing_strategy": "full",
    "step1_behaviors": 10,
    "step2_behavioral": 10,
    "step2_explicit": 0,
    "step3_final": 10,
    "validation_summary": {
      "deduplication_actions": "None, all techniques were unique.",
      "false_positives_removed": [],
      "high_confidence": 10,
      "low_confidence": 0,
      "medium_confidence": 0,
      "total_techniques": 10
    }
  },
  "mitre_ttps": [
    "T1566.001",
    "T1574.002",
    "T1059.001",
    "T1059.003",
    "T1547.001",
    "T1027",
    "T1055",
    "T1218",
    "T1041",
    "T1071.001"
  ],
  "mitre_ttps_extraction_attempted": true,
  "patch_availability": false,
  "possible_motivations": [
    "espionage",
    "financial",
    "sabotage"
  ],
  "primary_motivation": "espionage",
  "primary_regions_affected": [
    "Southeast Asia",
    "East Asia",
    "Global"
  ],
  "recommendations_and_mitigations": "Monitor for specific behaviors outlined in the attack chain, such as certutil abuse and WMI queries, to enhance security posture.",
  "regional_context": "Southeast Asia is experiencing increasing cyber threats, with nations like Vietnam enhancing their cyber capabilities, which may lead to a regional arms race in cyber warfare.",
  "secondary_motivations": [
    "financial",
    "sabotage"
  ],
  "sectors": [],
  "source_url": "https://www.bleepingcomputer.com/news/security/from-infostealer-to-full-rat-dissecting-the-purerat-attack-chain/",
  "stakeholder_interests": "Various state and non-state actors have vested interests in the outcomes of these cyber operations, including national security agencies, private sector companies, and international organizations focused on cybersecurity.",
  "strategic_implications": [
    "The use of sophisticated malware like PureRAT indicates a growing capability among non-state actors in the region, which could destabilize existing security frameworks and challenge state sovereignty."
  ],
  "summary": "The PureRAT attack chain begins with a phishing email that leads to a sophisticated multi-stage malware deployment, culminating in the use of the PureRAT remote access trojan (RAT). This campaign showcases a blend of custom and off-the-shelf malware, employing techniques such as DLL sideloading, in-memory execution, and process hollowing to evade detection. The final payload, PureRAT, allows attackers extensive control over compromised systems, including data theft and surveillance capabilities. The threat actor's use of Telegram for data exfiltration and command-and-control further indicates a well-organized operation, likely linked to the PXA Stealer group.",
  "tension_level": "medium",
  "threat_actors": [
    "PXA",
    "@LoneNone"
  ],
  "title": "From infostealer to full RAT: dissecting the PureRAT attack chain",
  "underlying_causes": [
    "The rise of cyber capabilities in Southeast Asia, particularly in Vietnam, where the threat actor PXA is believed to operate. This reflects broader regional trends in cyber warfare and state-sponsored espionage."
  ],
  "url": "https://www.bleepingcomputer.com/news/security/from-infostealer-to-full-rat-dissecting-the-purerat-attack-chain/",
  "victims": [],
  "zero_day_mention": false
}